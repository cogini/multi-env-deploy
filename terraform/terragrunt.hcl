# ---------------------------------------------------------------------------------------------------------------------
# TERRAGRUNT CONFIGURATION
# Terragrunt is a thin wrapper for Terraform that provides extra tools for
# working with multiple Terraform modules, remote state, and locking:
# https://github.com/gruntwork-io/terragrunt
# ---------------------------------------------------------------------------------------------------------------------

# This is based on the structure in
# https://github.com/gruntwork-io/terragrunt-infrastructure-live-example
# modified to be more flat.

locals {
  account_vars     = read_terragrunt_config(find_in_parent_folders("account.hcl"))
  region_vars      = read_terragrunt_config(find_in_parent_folders("region.hcl"))
  env_vars         = read_terragrunt_config(find_in_parent_folders("env.hcl"))
  common_vars      = read_terragrunt_config(find_in_parent_folders("common.hcl"))

  # Extract variables for easy access
  # aws_account_name = local.account_vars.locals.aws_account_name
  # aws_account_id   = local.account_vars.locals.aws_account_id
  aws_region       = local.region_vars.locals.aws_region

  # Default and common settings
  # common_vars = yamldecode(
  #  file(find_in_parent_folders("common.yml"))
  #)
  #default_yaml_path = find_in_parent_folders("empty.yml")

  org = local.common_vars.locals.org
  app_name = local.common_vars.locals.app_name
  # env = local.env_vars.locals.env
  env = get_env("ENV", "dev")
}

# Generate an AWS provider block
generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite_terragrunt"
  contents  = <<EOF
provider "aws" {
  region = "${local.aws_region}"

  # Only these AWS Account IDs may be operated on by this template
  # allowed_account_ids = [local.aws_account_id]
}
EOF
}

# Configure Terragrunt to store state in S3 bucket
remote_state {
  backend = "s3"
  config = {
    encrypt        = true
    bucket         = format("%s-%s-%s-tfstate", local.org, local.app_name, local.env)
    dynamodb_table = format("%s-%s-%s-tfstate", local.org, local.app_name, local.env)
    key            = "${path_relative_to_include()}/terraform.tfstate"
    region         = local.aws_region
    # region         = get_env("TF_VAR_remote_state_s3_bucket_region", "us-east-1")
  }
  generate = {
    path      = "backend.tf"
    # Overwrite the existing file if it was generated by terragrunt, otherwise error"
    if_exists = "overwrite_terragrunt"
  }
}

# Terraform configuration needed for ci/cd
terraform {
  extra_arguments "auto_approve" {
    commands = [
      "apply"
    ]
    arguments = [
      "-auto-approve"
    ]
  }
}

# ---------------------------------------------------------------------------------------------------------------------
# GLOBAL PARAMETERS
# These variables apply to all configurations in this subfolder. These are
# automatically merged into the child `terragrunt.hcl` config via the include block.
# ---------------------------------------------------------------------------------------------------------------------

# Configure root level variables that all resources can inherit. This is
# especially helpful with multi-account configs where terraform_remote_state
# data sources are placed directly into the modules.
inputs = merge(
  local.account_vars.locals,
  local.common_vars.locals,
  local.env_vars.locals,
  local.region_vars.locals,
  {
    # Used within TF modules for parsing data
    remote_state_s3_bucket_region = local.aws_region
    remote_state_s3_bucket_name   = format("%s-%s-%s-tfstate", local.org, local.app_name, local.env)
    remote_state_s3_key_prefix    = local.env
  }
  # yamldecode(
  #   # Default and common settings
  #   file("${find_in_parent_folders("common.yml", local.default_yaml_path)}"),
  # ),
  # yamldecode(
  #   # Settings for environment
  #   file("${find_in_parent_folders("${local.env}.yml", local.default_yaml_path)}"),
  # ),
  # Use a directory hierarchy to load config files:
  # yamldecode(
  #   file("${get_terragrunt_dir()}/${find_in_parent_folders("env.yml", local.default_yaml_path)}"),
  # ),
  # yamldecode(
  #   file("${get_terragrunt_dir()}/${find_in_parent_folders("region.yml", local.default_yaml_path)}"),
  # ),
  # {
  #   aws_profile = "non-prod"
  # },
)
